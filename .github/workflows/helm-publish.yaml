# name: CI/CD
# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ develop ]
#   release:
#     types: [published]

# env:
#   REGISTRY: ghcr.io
#   IMAGE_NAME: ${{ github.repository }}
#   CHART_NAME: java-chart
#   CHART_VERSION: 1.0.1

# jobs:
#   maven_build:
#     name: Maven Build
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - name: Set up JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'
#       - name: Build project with Maven
#         run: mvn -B package --file pom.xml
#       - name: Upload Maven Artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: maven-artifact
#           path: target/*.war
  
#   codeql-analysis:
#     name: CodeQL Analysis
#     runs-on: ubuntu-latest
#     needs: maven_build
#     permissions:
#       security-events: write
#       actions: read
#       contents: read
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
#       - name: Initialize CodeQL
#         uses: github/codeql-action/init@v3
#         with:
#           languages: java
#       - name: Autobuild
#         uses: github/codeql-action/autobuild@v3
#       # - name: Manual Build (if needed)
#       #   run: mvn clean install
#       - name: Perform CodeQL Analysis
#         uses: github/codeql-action/analyze@v3

#   Docker_build_and_push_image_TO_GHCR:
#     name: Build and Push Docker image
#     runs-on: ubuntu-latest
#     needs: codeql-analysis
#     permissions:
#       contents: read
#       packages: write
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
#       - name: Download Maven Artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: maven-artifact
#       - name: Log in to the GitHub Container registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Extract metadata (tags, labels) for Docker
#         id: meta
#         uses: docker/metadata-action@v4
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

#       - name: Build and push Docker image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           file: ./Dockerfile
#           push: true
#           tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
#           #tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
  
#   helm_package_and_push:
#     runs-on: ubuntu-latest
#     needs: [Docker_build_and_push_image_TO_GHCR]
#     permissions:
#       contents: read
#       packages: write

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up Helm
#         uses: azure/setup-helm@v3
#         with:
#           version: v3.12.0

#       - name: Log in to GitHub Container Registry (for Helm)
#         run: echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

#       - name: Package Helm Chart
#         run: |
#           helm package ${{ env.CHART_NAME }} --version ${{ env.CHART_VERSION }}
#           ls -l *.tgz

#       - name: Push Helm Chart to OCI Registry
#         run: |
#           helm push ${{ env.CHART_NAME }}-${{ env.CHART_VERSION }}.tgz oci://${{ env.REGISTRY }}/${{ github.repository }}/java-chart

#       - name: Logout from Helm Registry
#         run: helm registry logout ${{ env.REGISTRY }}